# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountingSystemEntity {
	id: String!
	name: String!
}

type PaginatedAccountingSystem {
	data: [AccountingSystemEntity!]
	page: Int!
	totalCount: Int!
}

type FileEntity {
	id: String!
	url: String!
}

type FondyEntity {
	id: String!
	merchantId: String!
	secretKey: String!
	company: CompanyEntity!
}

type CategoryEntity {
	id: String!
	name: String!
	place: PlaceEntity!
	products: [ProductEntity!]!
	file: FileEntity
}

type PaginatedCategory {
	data: [CategoryEntity!]
	page: Int!
	totalCount: Int!
}

type ProductEntity {
	id: String!
	name: String!
	category: CategoryEntity!
	description: String
	price: Int!
	file: FileEntity
	attrsGroups: [AttributesGroupEntity!]
}

type PaginatedProduct {
	data: [ProductEntity!]
	page: Int!
	totalCount: Int!
}

type AttributesGroupEntity {
	id: String!
	name: String!
	isUniq: Boolean
	attributes: [AttributesEntity!]
	products: [ProductEntity!]
	place: PlaceEntity!
}

type PaginatedAttributeGroups {
	data: [AttributesGroupEntity!]
	page: Int!
	totalCount: Int!
}

type AttributesEntity {
	id: String!
	name: String!
	attributesGroup: AttributesGroupEntity
	price: Int
}

type PaginatedAttributes {
	data: [AttributesEntity!]
	page: Int!
	totalCount: Int!
}

type ActiveShiftEntity {
	id: String!
	waiter: UserEntity
	table: TableEntity
	place: PlaceEntity
	orders: [ActiveOrderEntity!]
	shiftDate: String!
}

type PaginatedActiveShift {
	data: [ActiveShiftEntity!]
	page: Int!
	totalCount: Int!
}

type HistoryShiftEntity {
	id: String!
	waiter: UserEntity
	table: TableEntity
	place: PlaceEntity
	orders: [ActiveOrderEntity!]
	shiftDate: String!
}

type ActiveOrderEntity {
	id: String!
	orderCode: String!
	table: TableEntity!
	users: [UserEntity!]!
	type: OrderTypeEnum!
	status: OrderStatusEnum!
	place: PlaceEntity!
	shift: ActiveShiftEntity
}

enum OrderTypeEnum {
	RESERVE
	PICKUP
	IN_PLACE
	DELIVERY
}

enum OrderStatusEnum {
	OPENED
	CLOSED
}

type PaginatedActiveOrder {
	data: [ActiveOrderEntity!]
	page: Int!
	totalCount: Int!
}

type HistoryOrderEntity {
	id: String!
	orderCode: String!
	table: TableEntity!
	users: [UserEntity!]!
	type: OrderTypeEnum!
	status: OrderStatusEnum!
	place: PlaceEntity!
	shift: ActiveShiftEntity
}

type TableEntity {
	id: String!
	name: String!
	code: Int!
	hall: HallEntity!
	orders: [ActiveOrderEntity!]
	file: FileEntity!
}

type PaginatedTable {
	data: [TableEntity!]
	page: Int!
	totalCount: Int!
}

type HallEntity {
	id: String!
	name: String!
	place: PlaceEntity!
	file: FileEntity
	tables: [TableEntity!]
}

type PaginatedHall {
	data: [HallEntity!]
	page: Int!
	totalCount: Int!
}

type PlaceEntity {
	id: String!
	name: String!
	company: CompanyEntity!
	address: String!
	status: PlaceStatusEnum!
	halls: [HallEntity!]!
	categories: [CategoryEntity!]!
	file: FileEntity
	a11y: String!
	weekDays: String!
	weekendDays: String!
	holidayDays: String!
	attrGroups: [AttributesGroupEntity!]!
	orders: [ActiveOrderEntity!]
}

enum PlaceStatusEnum {
	OPENED
	CLOSED
}

type PaginatedPlace {
	data: [PlaceEntity!]
	page: Int!
	totalCount: Int!
}

type CompanyEntity {
	id: String!
	name: String!
	owner: UserEntity!
	places: [PlaceEntity!]
	employees: [UserEntity!]
	status: CompanyStatusEnum!
	logo: FileEntity
	fondy: FondyEntity
}

enum CompanyStatusEnum {
	APPROVED
	REJECTED
	PENDING
}

type PaginatedCompany {
	data: [CompanyEntity!]
	page: Int!
	totalCount: Int!
}

type UserEntity {
	id: String!
	name: String!
	role: UserRoleEnum!
	theme: ThemeEnum!
	email: String
	googleId: String
	telegramId: Int
	telegramToken: String
	tel: String
	verificationCode: Int
	status: UserStatusEnum!
	password: String
	orders: [ActiveOrderEntity!]!
	company: CompanyEntity
}

enum UserRoleEnum {
	ROOT
	ADMIN
	HOSTESS
	WAITER
	HOOKAH
	CLIENT
}

enum ThemeEnum {
	LIGHT
	DARK
}

enum UserStatusEnum {
	NOT_VERIFIED
	VERIFIED
}

type PaginatedUser {
	data: [UserEntity!]
	page: Int!
	totalCount: Int!
}

type CommandEntity {
	id: String!
	name: String!
}

type PaginatedCommand {
	data: [CommandEntity!]
	page: Int!
	totalCount: Int!
}

type LanguageEntity {
	id: String!
	name: String!
	file: FileEntity!
}

type PaymentSystemEntity {
	id: String!
	name: String!
}

type PaginatedPaymentSystem {
	data: [PaymentSystemEntity!]
	page: Int!
	totalCount: Int!
}

input FileEntityInput {
	url: String!
}

input FondyEntityInput {
	merchantId: String!
	secretKey: String!
	company: CompanyEntityInput!
}

input CategoryEntityInput {
	name: String!
	place: PlaceEntityInput!
	products: [ProductEntityInput!]!
	file: FileEntityInput
}

input ProductEntityInput {
	name: String!
	category: CategoryEntityInput!
	description: String
	price: Int!
	file: FileEntityInput
	attrsGroups: [AttributesGroupEntityInput!]
}

input AttributesGroupEntityInput {
	name: String!
	isUniq: Boolean = false
	attributes: [AttributesEntityInput!]
	products: [ProductEntityInput!]
	place: PlaceEntityInput!
}

input AttributesEntityInput {
	name: String!
	attributesGroup: AttributesGroupEntityInput
	price: Int
}

input ActiveShiftEntityInput {
	waiter: UserEntityInput
	table: TableEntityInput
	place: PlaceEntityInput
	orders: [ActiveOrderEntityInput!]
	shiftDate: String!
}

input HistoryShiftEntityInput {
	waiter: UserEntityInput
	table: TableEntityInput
	place: PlaceEntityInput
	orders: [ActiveOrderEntityInput!]
	shiftDate: String!
}

input ActiveOrderEntityInput {
	orderCode: String!
	table: TableEntityInput!
	users: [UserEntityInput!]!
	type: OrderTypeEnum!
	status: OrderStatusEnum!
	place: PlaceEntityInput!
	shift: ActiveShiftEntityInput
}

input HistoryOrderEntityInput {
	orderCode: String!
	table: TableEntityInput!
	users: [UserEntityInput!]!
	type: OrderTypeEnum!
	status: OrderStatusEnum!
	place: PlaceEntityInput!
	shift: ActiveShiftEntityInput
}

input TableEntityInput {
	name: String!
	code: Int!
	hall: HallEntityInput!
	orders: [ActiveOrderEntityInput!]
	file: FileEntityInput!
}

input HallEntityInput {
	name: String!
	place: PlaceEntityInput!
	file: FileEntityInput
	tables: [TableEntityInput!]
}

input PlaceEntityInput {
	name: String!
	company: CompanyEntityInput!
	address: String!
	status: PlaceStatusEnum!
	halls: [HallEntityInput!]!
	categories: [CategoryEntityInput!]!
	file: FileEntityInput
	a11y: String!
	weekDays: String!
	weekendDays: String!
	holidayDays: String!
	attrGroups: [AttributesGroupEntityInput!]!
	orders: [ActiveOrderEntityInput!]
}

input CompanyEntityInput {
	name: String!
	owner: UserEntityInput!
	places: [PlaceEntityInput!]
	employees: [UserEntityInput!]
	status: CompanyStatusEnum!
	logo: FileEntityInput
	fondy: FondyEntityInput
}

input UserEntityInput {
	name: String!
	role: UserRoleEnum!
	theme: ThemeEnum!
	email: String
	googleId: String
	telegramId: Int
	telegramToken: String
	tel: String
	verificationCode: Int
	status: UserStatusEnum!
	password: String
	orders: [ActiveOrderEntityInput!]!
	company: CompanyEntityInput
}

input PaymentSystemEntityInput {
	name: String!
}

type Query {
	attribute(id: String!): AttributesEntity!
	attributes(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedAttributes!
	attributeGroup(id: String!): AttributesGroupEntity!
	attributeGroups(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedAttributeGroups!
	accountingSystem(id: String!): AccountingSystemEntity!
	accountingSystems(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedAccountingSystem!
	payment(id: String!): PaymentSystemEntity!
	payments(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedPaymentSystem!
	company(id: String!): CompanyEntity!
	companies(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedCompany!
	shift(id: String!): ActiveShiftEntity!
	shifts(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedActiveShift!
	language(id: String!): LanguageEntity!
	languages(skip: Int! = 0, take: Int! = 25, filtersArgs: String): LanguageEntity!
	order(id: String!): ActiveOrderEntity!
	orders(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedActiveOrder!
	product(id: String!): ProductEntity!
	products(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedProduct!
	hall(id: String!): HallEntity!
	halls(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedHall!
	place(id: String!): PlaceEntity!
	places(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedPlace!
	category(id: String!): CategoryEntity!
	categories(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedCategory!
	table(id: String!): TableEntity!
	tables(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedTable!
	command(id: String!): CommandEntity!
	commands(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedCommand!
	user(id: String!): UserEntity!
	users(skip: Int! = 0, take: Int! = 25, filtersArgs: String): PaginatedUser!
}

type Mutation {
	createAttr(attr: CreateAttributeInput!): AttributesEntity!
	updateAttr(attr: UpdateAttributeInput!): AttributesEntity!
	deleteAttr(attrId: String!): String!
	createAttrGroup(attr: CreateAttributeGroupInput!): AttributesGroupEntity!
	updateAttrGroup(attrGroup: UpdateAttributeGroupInput!): AttributesGroupEntity!
	deleteAttrGroup(attrGroupId: String!): String!
	createAccountingSystem(accountingSystem: CreateAccountingSystemInput!): AccountingSystemEntity!
	updateAccountingSystem(accountingSystem: UpdateAccountingSystemInput!): AccountingSystemEntity!
	deleteAccountingSystem(accountingSystemId: String!): String!
	createCompany(company: CreateCompanyInput!): CompanyEntity!
	updateCompany(company: UpdateCompanyInput!): CompanyEntity!
	deleteCompany(companyId: String!): String!
	createShift(shift: CreateShitInput!): ActiveShiftEntity!
	updateShift(shift: UpdateShitInput!): ActiveShiftEntity!
	deleteShift(shiftId: String!): String!
	createOrder(order: CreateOrderInput!): ActiveOrderEntity!
	updateOrder(order: UpdateOrderInput!): ActiveOrderEntity!
	deleteOrder(orderId: String!): String!
	createProduct(product: CreateProductInput!): ProductEntity!
	updateProduct(product: UpdateProductInput!): ProductEntity!
	deleteProduct(productId: String!): String!
	createHall(hall: CreateHallInput!): HallEntity!
	updateHall(hall: UpdateHallInput!): HallEntity!
	deleteHall(hallId: String!): String!
	createPlace(place: CreatePlaceInput!): PlaceEntity!
	updatePlace(place: UpdatePlaceInput!): PlaceEntity!
	deletePlace(placeId: String!): String!
	createCategory(category: CreateCategoryInput!): CategoryEntity!
	updateCategory(category: UpdateCategoryInput!): CategoryEntity!
	deleteCategory(categoryId: String!): String!
	createTable(table: CreateTableInput!): TableEntity!
	updateTable(table: UpdateTableInput!): TableEntity!
	deleteTable(tableId: String!): String!
	createCommand(command: CreateCommandInput!): CommandEntity!
	updateCommand(command: String!): CommandEntity!
	deleteCommand(commandId: String!): String!
}

input CreateAttributeInput {
	name: String!
	price: Int!
}

input UpdateAttributeInput {
	id: String!
	name: String!
}

input CreateAttributeGroupInput {
	name: String!
	isUniq: Boolean!
	place: String!
}

input UpdateAttributeGroupInput {
	id: String!
	name: String!
	isUniq: Boolean!
}

input CreateAccountingSystemInput {
	name: String!
}

input UpdateAccountingSystemInput {
	id: String!
	name: String!
}

input CreateCompanyInput {
	name: String!
	logo: FileEntityInput
}

input UpdateCompanyInput {
	id: String!
	name: String!
	logo: FileEntityInput
	employees: [String!]
}

input CreateShitInput {
	waiter: String!
	table: String!
	place: String!
	orders: [String!]!
	shiftDate: [String!]!
}

input UpdateShitInput {
	id: String!
	waiter: String!
	table: String!
	place: String!
	orders: [String!]!
	shiftDate: [String!]!
}

input CreateOrderInput {
	type: OrderTypeEnum!
	place: String!
}

input UpdateOrderInput {
	id: String!
	type: OrderTypeEnum!
}

input CreateProductInput {
	name: String!
	category: String!
	description: String!
	price: Float!
	file: FileEntityInput
	attrsGroups: [String!]
}

input UpdateProductInput {
	id: String!
	name: String!
	category: String!
	description: String!
	price: Float!
	file: FileEntityInput
}

input CreateHallInput {
	name: String!
	place: String!
	file: FileEntityInput
}

input UpdateHallInput {
	id: String!
	name: String!
	file: FileEntityInput
}

input CreatePlaceInput {
	name: String!
	address: String!
	company: String!
	file: FileEntityInput!
	weekDays: WorkingHoursInput!
	weekendDays: WorkingHoursInput!
	holidayDays: WorkingHoursInput!
}

input WorkingHoursInput {
	name: String!
	start: Int!
	end: Int!
}

input UpdatePlaceInput {
	id: String!
	name: String!
	address: String!
	file: FileEntityInput!
	weekDays: WorkingHoursInput!
	weekendDays: WorkingHoursInput!
	holidayDays: WorkingHoursInput!
}

input CreateCategoryInput {
	name: String!
	place: String!
	file: FileEntityInput
}

input UpdateCategoryInput {
	id: String!
	name: String
	place: String
	file: FileEntityInput
}

input CreateTableInput {
	name: String!
	hall: String!
	file: FileEntityInput
}

input UpdateTableInput {
	id: String!
	name: String!
	file: FileEntityInput
}

input CreateCommandInput {
	name: String!
}
